version: '3.8'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ticket_system_app
    ports:
      - "${PORT:-8000}:8000"
    environment:
      - RUST_LOG=${RUST_LOG:-ticket_system=debug,tower_http=debug}
      - PORT=${PORT:-8000}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://cache:6379
      - KAFKA_BROKERS=redpanda:9092
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_healthy
      redpanda:
        condition: service_started
    volumes:
      - .:/app
      - cargo-cache:/usr/local/cargo/registry
      - target-cache:/app/target
    networks:
      - ticket_network
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    container_name: ticket_system_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-ticket_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-ticket_password}
      - POSTGRES_DB=${POSTGRES_DB:-ticket_system}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ticket_user} -d ${POSTGRES_DB:-ticket_system}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticket_network
    restart: unless-stopped

  cache:
    image: redis:7-alpine
    container_name: ticket_system_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticket_network
    restart: unless-stopped

  redpanda:
    image: redpandadata/redpanda:latest
    container_name: ticket_system_redpanda
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      - --advertise-kafka-addr internal://redpanda:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      - --advertise-pandaproxy-addr internal://redpanda:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      - --rpc-addr redpanda:33145
      - --advertise-rpc-addr redpanda:33145
      - --mode dev-container
      - --smp 1
      - --memory 1G
      - --overprovisioned
    ports:
      - "18081:18081"  # Schema Registry
      - "18082:18082"  # HTTP Proxy
      - "19092:19092"  # Kafka API
      - "19644:9644"   # Admin API
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    networks:
      - ticket_network
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -q 'Healthy.*true' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  redpanda-console:
    image: redpandadata/console:latest
    container_name: ticket_system_redpanda_console
    depends_on:
      - redpanda
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKERS: redpanda:9092
      KAFKA_SCHEMAREGISTRY_ENABLED: true
      KAFKA_SCHEMAREGISTRY_URLS: http://redpanda:8081
    networks:
      - ticket_network

volumes:
  postgres_data:
  redis_data:
  redpanda_data:
  cargo-cache:
  target-cache:

networks:
  ticket_network:
    driver: bridge